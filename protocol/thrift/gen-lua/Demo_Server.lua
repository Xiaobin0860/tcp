--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'Demo_ttypes'

ServerClient = __TObject.new(__TClient, {
  __type = 'ServerClient'
})

function ServerClient:send_i(num)
  self:send_send_i(num)
  self:recv_send_i(num)
end

function ServerClient:send_send_i(num)
  self.oprot:writeMessageBegin('send_i', TMessageType.CALL, self._seqid)
  local args = send_i_args:new{}
  args.num = num
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ServerClient:recv_send_i(num)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = send_i_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ServerClient:send_is(len, msg)
  self:send_send_is(len, msg)
  self:recv_send_is(len, msg)
end

function ServerClient:send_send_is(len, msg)
  self.oprot:writeMessageBegin('send_is', TMessageType.CALL, self._seqid)
  local args = send_is_args:new{}
  args.len = len
  args.msg = msg
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ServerClient:recv_send_is(len, msg)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = send_is_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
ServerIface = __TObject:new{
  __type = 'ServerIface'
}


ServerProcessor = __TObject.new(__TProcessor
, {
 __type = 'ServerProcessor'
})

function ServerProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ServerProcessor:process_send_i(seqid, iprot, oprot, server_ctx)
  local args = send_i_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = send_i_result:new{}
  local status, res = pcall(self.handler.send_i, self.handler, args.num)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('send_i', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ServerProcessor:process_send_is(seqid, iprot, oprot, server_ctx)
  local args = send_is_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = send_is_result:new{}
  local status, res = pcall(self.handler.send_is, self.handler, args.len, args.msg)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('send_is', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

send_i_args = __TObject:new{
  num
}

function send_i_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.num = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function send_i_args:write(oprot)
  oprot:writeStructBegin('send_i_args')
  if self.num ~= nil then
    oprot:writeFieldBegin('num', TType.I32, 1)
    oprot:writeI32(self.num)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

send_i_result = __TObject:new{

}

function send_i_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function send_i_result:write(oprot)
  oprot:writeStructBegin('send_i_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

send_is_args = __TObject:new{
  len,
  msg
}

function send_is_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.len = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.msg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function send_is_args:write(oprot)
  oprot:writeStructBegin('send_is_args')
  if self.len ~= nil then
    oprot:writeFieldBegin('len', TType.I32, 1)
    oprot:writeI32(self.len)
    oprot:writeFieldEnd()
  end
  if self.msg ~= nil then
    oprot:writeFieldBegin('msg', TType.STRING, 2)
    oprot:writeString(self.msg)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

send_is_result = __TObject:new{

}

function send_is_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function send_is_result:write(oprot)
  oprot:writeStructBegin('send_is_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
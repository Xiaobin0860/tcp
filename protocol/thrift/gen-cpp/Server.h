/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Server_H
#define Server_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "demo_types.h"

namespace Demo {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServerIf {
 public:
  virtual ~ServerIf() {}
  virtual void send_i(const int32_t num) = 0;
  virtual void send_is(const int32_t len, const std::string& msg) = 0;
};

class ServerIfFactory {
 public:
  typedef ServerIf Handler;

  virtual ~ServerIfFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServerIf* /* handler */) = 0;
};

class ServerIfSingletonFactory : virtual public ServerIfFactory {
 public:
  ServerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ServerIf>& iface) : iface_(iface) {}
  virtual ~ServerIfSingletonFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServerIf> iface_;
};

class ServerNull : virtual public ServerIf {
 public:
  virtual ~ServerNull() {}
  void send_i(const int32_t /* num */) {
    return;
  }
  void send_is(const int32_t /* len */, const std::string& /* msg */) {
    return;
  }
};

typedef struct _Server_send_i_args__isset {
  _Server_send_i_args__isset() : num(false) {}
  bool num :1;
} _Server_send_i_args__isset;

class Server_send_i_args {
 public:

  Server_send_i_args(const Server_send_i_args&);
  Server_send_i_args& operator=(const Server_send_i_args&);
  Server_send_i_args() : num(0) {
  }

  virtual ~Server_send_i_args() throw();
  int32_t num;

  _Server_send_i_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const Server_send_i_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Server_send_i_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_send_i_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_i_pargs {
 public:


  virtual ~Server_send_i_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_i_result {
 public:

  Server_send_i_result(const Server_send_i_result&);
  Server_send_i_result& operator=(const Server_send_i_result&);
  Server_send_i_result() {
  }

  virtual ~Server_send_i_result() throw();

  bool operator == (const Server_send_i_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_send_i_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_send_i_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_i_presult {
 public:


  virtual ~Server_send_i_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_send_is_args__isset {
  _Server_send_is_args__isset() : len(false), msg(false) {}
  bool len :1;
  bool msg :1;
} _Server_send_is_args__isset;

class Server_send_is_args {
 public:

  Server_send_is_args(const Server_send_is_args&);
  Server_send_is_args& operator=(const Server_send_is_args&);
  Server_send_is_args() : len(0), msg() {
  }

  virtual ~Server_send_is_args() throw();
  int32_t len;
  std::string msg;

  _Server_send_is_args__isset __isset;

  void __set_len(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const Server_send_is_args & rhs) const
  {
    if (!(len == rhs.len))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Server_send_is_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_send_is_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_is_pargs {
 public:


  virtual ~Server_send_is_pargs() throw();
  const int32_t* len;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_is_result {
 public:

  Server_send_is_result(const Server_send_is_result&);
  Server_send_is_result& operator=(const Server_send_is_result&);
  Server_send_is_result() {
  }

  virtual ~Server_send_is_result() throw();

  bool operator == (const Server_send_is_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_send_is_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_send_is_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_send_is_presult {
 public:


  virtual ~Server_send_is_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServerClient : virtual public ServerIf {
 public:
  ServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_i(const int32_t num);
  void send_send_i(const int32_t num);
  void recv_send_i();
  void send_is(const int32_t len, const std::string& msg);
  void send_send_is(const int32_t len, const std::string& msg);
  void recv_send_is();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send_i(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_is(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServerProcessor(::apache::thrift::stdcxx::shared_ptr<ServerIf> iface) :
    iface_(iface) {
    processMap_["send_i"] = &ServerProcessor::process_send_i;
    processMap_["send_is"] = &ServerProcessor::process_send_is;
  }

  virtual ~ServerProcessor() {}
};

class ServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ServerIfFactory > handlerFactory_;
};

class ServerMultiface : virtual public ServerIf {
 public:
  ServerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ServerIf> > ifaces_;
  ServerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send_i(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_i(num);
    }
    ifaces_[i]->send_i(num);
  }

  void send_is(const int32_t len, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_is(len, msg);
    }
    ifaces_[i]->send_is(len, msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServerConcurrentClient : virtual public ServerIf {
 public:
  ServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_i(const int32_t num);
  int32_t send_send_i(const int32_t num);
  void recv_send_i(const int32_t seqid);
  void send_is(const int32_t len, const std::string& msg);
  int32_t send_send_is(const int32_t len, const std::string& msg);
  void recv_send_is(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif

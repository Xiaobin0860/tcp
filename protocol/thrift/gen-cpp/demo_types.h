/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef demo_TYPES_H
#define demo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Demo {

struct Type {
  enum type {
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4
  };
};

extern const std::map<int, const char*> _Type_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Type::type& val);

class Work;

class Worker;

typedef struct _Work__isset {
  _Work__isset() : num1(true), num2(false), type(false), comment(false), key(false) {}
  bool num1 :1;
  bool num2 :1;
  bool type :1;
  bool comment :1;
  bool key :1;
} _Work__isset;

class Work : public virtual ::apache::thrift::TBase {
 public:

  Work(const Work&);
  Work& operator=(const Work&);
  Work() : num1(0), num2(0), type((Type::type)0), comment(), key() {
  }

  virtual ~Work() throw();
  int32_t num1;
  int64_t num2;
  Type::type type;
  std::string comment;
  std::string key;

  _Work__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int64_t val);

  void __set_type(const Type::type val);

  void __set_comment(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const Work & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const Work &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Work & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Work &a, Work &b);

std::ostream& operator<<(std::ostream& out, const Work& obj);

typedef struct _Worker__isset {
  _Worker__isset() : works(false), result(false), work_map(false) {}
  bool works :1;
  bool result :1;
  bool work_map :1;
} _Worker__isset;

class Worker : public virtual ::apache::thrift::TBase {
 public:

  Worker(const Worker&);
  Worker& operator=(const Worker&);
  Worker() : result(0) {
  }

  virtual ~Worker() throw();
  std::vector<Work>  works;
  double result;
  std::map<std::string, Work>  work_map;

  _Worker__isset __isset;

  void __set_works(const std::vector<Work> & val);

  void __set_result(const double val);

  void __set_work_map(const std::map<std::string, Work> & val);

  bool operator == (const Worker & rhs) const
  {
    if (__isset.works != rhs.__isset.works)
      return false;
    else if (__isset.works && !(works == rhs.works))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(work_map == rhs.work_map))
      return false;
    return true;
  }
  bool operator != (const Worker &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Worker & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Worker &a, Worker &b);

std::ostream& operator<<(std::ostream& out, const Worker& obj);

} // namespace

#endif

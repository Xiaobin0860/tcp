<?php
namespace Demo;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Type {
  const ADD = 1;
  const SUBTRACT = 2;
  const MULTIPLY = 3;
  const DIVIDE = 4;
  static public $__names = array(
    1 => 'ADD',
    2 => 'SUBTRACT',
    3 => 'MULTIPLY',
    4 => 'DIVIDE',
  );
}

class Work {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'num1',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'num2',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    3 => array(
      'var' => 'type',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    4 => array(
      'var' => 'comment',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'key',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $num1 = 0;
  /**
   * @var int
   */
  public $num2 = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var string
   */
  public $key = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['num1'])) {
        $this->num1 = $vals['num1'];
      }
      if (isset($vals['num2'])) {
        $this->num2 = $vals['num2'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
    }
  }

  public function getName() {
    return 'Work';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Work');
    if ($this->num1 !== null) {
      $xfer += $output->writeFieldBegin('num1', TType::I32, 1);
      $xfer += $output->writeI32($this->num1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num2 !== null) {
      $xfer += $output->writeFieldBegin('num2', TType::I64, 2);
      $xfer += $output->writeI64($this->num2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 5);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Worker {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'works',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Demo\Work',
        ),
      ),
    2 => array(
      'var' => 'result',
      'isRequired' => false,
      'type' => TType::DOUBLE,
      ),
    3 => array(
      'var' => 'work_map',
      'isRequired' => false,
      'type' => TType::MAP,
      'ktype' => TType::STRING,
      'vtype' => TType::STRUCT,
      'key' => array(
        'type' => TType::STRING,
      ),
      'val' => array(
        'type' => TType::STRUCT,
        'class' => '\Demo\Work',
        ),
      ),
    );

  /**
   * @var \Demo\Work[]
   */
  public $works = null;
  /**
   * @var double
   */
  public $result = null;
  /**
   * @var array
   */
  public $work_map = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['works'])) {
        $this->works = $vals['works'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['work_map'])) {
        $this->work_map = $vals['work_map'];
      }
    }
  }

  public function getName() {
    return 'Worker';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->works = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Demo\Work();
              $xfer += $elem5->read($input);
              $this->works []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->work_map = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = '';
              $val12 = new \Demo\Work();
              $xfer += $input->readString($key11);
              $val12 = new \Demo\Work();
              $xfer += $val12->read($input);
              $this->work_map[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Worker');
    if ($this->works !== null) {
      if (!is_array($this->works)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('works', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->works));
        {
          foreach ($this->works as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_map !== null) {
      if (!is_array($this->work_map)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('work_map', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->work_map));
        {
          foreach ($this->work_map as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $viter15->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



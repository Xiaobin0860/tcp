/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "demo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Demo {

int _kTypeValues[] = {
  Type::ADD,
  Type::SUBTRACT,
  Type::MULTIPLY,
  Type::DIVIDE
};
const char* _kTypeNames[] = {
  "ADD",
  "SUBTRACT",
  "MULTIPLY",
  "DIVIDE"
};
const std::map<int, const char*> _Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTypeValues, _kTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Type::type& val) {
  std::map<int, const char*>::const_iterator it = _Type_VALUES_TO_NAMES.find(val);
  if (it != _Type_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Work::~Work() throw() {
}


void Work::__set_num1(const int32_t val) {
  this->num1 = val;
}

void Work::__set_num2(const int64_t val) {
  this->num2 = val;
}

void Work::__set_type(const Type::type val) {
  this->type = val;
}

void Work::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void Work::__set_key(const std::string& val) {
  this->key = val;
}
std::ostream& operator<<(std::ostream& out, const Work& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Work::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (Type::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Work::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Work");

  xfer += oprot->writeFieldBegin("num1", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->num2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comment) {
    xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->comment);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Work &a, Work &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.type, b.type);
  swap(a.comment, b.comment);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

Work::Work(const Work& other1) {
  num1 = other1.num1;
  num2 = other1.num2;
  type = other1.type;
  comment = other1.comment;
  key = other1.key;
  __isset = other1.__isset;
}
Work& Work::operator=(const Work& other2) {
  num1 = other2.num1;
  num2 = other2.num2;
  type = other2.type;
  comment = other2.comment;
  key = other2.key;
  __isset = other2.__isset;
  return *this;
}
void Work::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Work(";
  out << "num1=" << to_string(num1);
  out << ", " << "num2=" << to_string(num2);
  out << ", " << "type=" << to_string(type);
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "key=" << to_string(key);
  out << ")";
}


Worker::~Worker() throw() {
}


void Worker::__set_works(const std::vector<Work> & val) {
  this->works = val;
__isset.works = true;
}

void Worker::__set_result(const double val) {
  this->result = val;
}

void Worker::__set_work_map(const std::map<std::string, Work> & val) {
  this->work_map = val;
}
std::ostream& operator<<(std::ostream& out, const Worker& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Worker::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->works.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->works.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->works[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.works = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->work_map.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _ktype9;
            ::apache::thrift::protocol::TType _vtype10;
            xfer += iprot->readMapBegin(_ktype9, _vtype10, _size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              std::string _key13;
              xfer += iprot->readString(_key13);
              Work& _val14 = this->work_map[_key13];
              xfer += _val14.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.work_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Worker::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Worker");

  if (this->__isset.works) {
    xfer += oprot->writeFieldBegin("works", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->works.size()));
      std::vector<Work> ::const_iterator _iter15;
      for (_iter15 = this->works.begin(); _iter15 != this->works.end(); ++_iter15)
      {
        xfer += (*_iter15).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_map", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->work_map.size()));
    std::map<std::string, Work> ::const_iterator _iter16;
    for (_iter16 = this->work_map.begin(); _iter16 != this->work_map.end(); ++_iter16)
    {
      xfer += oprot->writeString(_iter16->first);
      xfer += _iter16->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Worker &a, Worker &b) {
  using ::std::swap;
  swap(a.works, b.works);
  swap(a.result, b.result);
  swap(a.work_map, b.work_map);
  swap(a.__isset, b.__isset);
}

Worker::Worker(const Worker& other17) {
  works = other17.works;
  result = other17.result;
  work_map = other17.work_map;
  __isset = other17.__isset;
}
Worker& Worker::operator=(const Worker& other18) {
  works = other18.works;
  result = other18.result;
  work_map = other18.work_map;
  __isset = other18.__isset;
  return *this;
}
void Worker::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Worker(";
  out << "works="; (__isset.works ? (out << to_string(works)) : (out << "<null>"));
  out << ", " << "result=" << to_string(result);
  out << ", " << "work_map=" << to_string(work_map);
  out << ")";
}

} // namespace
